======================================================
Example of Coo documentation for a Common Lisp library
======================================================

This is a small library includes a few functions with docstrings and a documentation
for the system and all included packages.

The purpose is to demonstrate core features of the
`coo <https://github.com/fisxoj/coo>`_ library.

The repository can be used as a template for new libraries if you've choosen ``Coo``
for documenting your library.

Let's review features, provided by ``Coo``.

==================
Pros & Cons of Coo
==================

.. note:: Because of some bug in ``cl-docutils``, I have to decorate this header above
          as a document's title :(

Pros
----

* reStructured text format has flexible abstraction to extend its functionality.
  You can add new "roles" to support different types of documentation blocks.
* reStructured text is widely used. It is like markdown, but is more suitable
  for writing large interlinked documents.
* extensions can be written in Common Lisp.
* cross-referencing works almost the same way like with cldomain_.


Cons
----

* reStructured implementation is incomplete and has bugs. For example, ``include``
  tag duplicates preceding lines. Roles ``toctree`` and ``code-block`` aren't supported.
* Syntax is more complex than Markdown and requires some time to get familiar with.
* Syntax relies on indentation and sometimes it leads to the problems.
* It is hard to debug error messages from ``cl-docutils``. But the Coo's author
  is `thinking about the alternatives <https://github.com/fisxoj/coo/issues/19>`_.
  For example, cl-docutils' header level processing is very buggy which makes
  hard to write large docs like this one. It frequently signals the
  ``Title Level Inconsistent`` error.
* You can fully control documentation layout. It is always file with system's description
  which includes one or more files for each system's packages.
* It inconvenient to write large blocks of code as docstring and you have to
  read them from files at compile-time.
* HTML themes aren't supported `yet <https://github.com/fisxoj/coo/issues/14>`_.


How to build the documentation
==============================

Comparing to cldomain_, Coo usage is much more easier for a Common Lisper.

You just install it from Ultralisp.org and run from the REPL like that:

::

   (coo:document-system "example"
                        :base-path #P"docs/build/")


Handwritten documentation
=========================

I think the ability to write a large pieces of documentation which aren't bound to
a function, class or module is an important feature. This way you can tell the user
about some toplevel abstractions and give a bird eye view on the library or system.

For example, handwritten parts of the documentation can provide some code snippets
to demonstrate the ways, how to use the library:

::

   (loop repeat 42
         collect (foo "bar" 100500))

And when you are talking about some function or class, you can reference it.
For example, if I'm talking about ``foo`` function, I can reference it like this
``:function:`example/app:foo``` and it will appear in the code as
the link :function:`example/app:foo`.

.. note:: However, Coo uses only docstrings for the system, packages and functions/classes/methods.

          You can't just write an chapter of the documentation on some abstract theme.

          That is why I consider that "handwritten docs" feature is missing from Coo :(


Autogenerated API
=================

``Coo`` provides a completely automated generation of the API reference.

At the end of the page with the system's documentation it includes links to all
packages, provided by the system.


.. _cldomain: https://cl-doc-systems.github.io/sphinxcontrib-cldomain/
